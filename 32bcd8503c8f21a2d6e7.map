{"version":3,"sources":["C:/Users/ariel/ceres/Header.js","C:/Users/ariel/ceres/utils.js","C:/Users/ariel/ceres/ImageCard.js","C:/Users/ariel/ceres/ImagePreview.js","C:/Users/ariel/ceres/ImageViewer.js","C:/Users/ariel/ceres/App.js","C:/Users/ariel/ceres/web-build/register-service-worker.js","C:/Users/ariel/ceres/assets/Euclid.ttf","C:/Users/ariel/ceres/assets/ARI.ttf"],"names":["Header","ui","React","useState","Animated","Value","fadeAnim","useEffect","timing","toValue","header","duration","start","View","style","opacity","marginBottom","marginTop","height","width","fontFamily","fill","stroke","strokeWidth","fontSize","x","y","StyleSheet","create","backgroundColor","marginLeft","fontWeight","letterSpacing","connect","state","webMobile","Platform","OS","Dimensions","get","getRandomInt","min","max","Math","ceil","floor","random","styles","cardContainer","cardWrapper","bottomWrapper","title","textTransform","description","ImageCard","img","i","pvImg","aspect","setAspect","Image","getSize","url","w","h","Text","wWidth","points","push","pointString","join","TouchableOpacity","onPress","source","uri","marginVertical","ImagePreview","previewUrl","dispatch","console","log","wH","setWh","position","left","top","ScrollView","horizontal","stickyHeaderIndices","TouchableHighlight","a","async","ScreenOrientation","getOrientationAsync","orientation","includes","lockAsync","Orientation","PORTRAIT","type","LANDSCAPE","borderRadius","color","textAlign","lineHeight","ImageViewer","store","imgUrls","alignItems","onScroll","event","nativeEvent","contentOffset","contentContainerStyle","flexGrow","justifyContent","maxWidth","container","map","key","folder","showPreview","flex","flexDirection","flexWrap","changeScreenOrientation","createStore","action","images","data","newImageState","applyMiddleware","thunk","App","props","isLoadingComplete","setLoadingComplete","modalVisible","setModalVisible","skipLoadingScreen","AppLoading","startAsync","loadResourcesAsync","onError","handleLoadingError","onFinish","handleFinishLoading","Modal","animationType","transparent","visible","onRequestClose","Alert","alert","onShow","StatusBar","hidden","Promise","all","Font","euclid","require","ARI","error","warn","fetch","then","response","json","navigator","window","addEventListener","serviceWorker","register","scope","info","catch","module","exports"],"mappings":"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","file":"static/js/app.0e4fb7e9.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Animated, Platform, StyleSheet, Text } from \"react-native\";\r\nimport Svg, { Text as TT } from \"react-native-svg\";\r\n\r\nlet Header = ({ ui }) => {\r\n  const [fadeAnim] = React.useState(new Animated.Value(0)); // Initial value for opacity: 0\r\n  React.useEffect(() => {\r\n    Animated.timing(fadeAnim, {\r\n      toValue: ui.header,\r\n      duration: 1000\r\n    }).start();\r\n  }, [ui.header]);\r\n\r\n  return (\r\n    <Animated.View\r\n      style={[{ opacity: fadeAnim, marginBottom: 30, marginTop: 20 }]}\r\n    >\r\n      {/* <Text style={[styles.header]}>ARIEL</Text> */}\r\n      <Svg height=\"150\" width=\"400\">\r\n        <TT\r\n          fontFamily=\"ARI\"\r\n          fill=\"none\"\r\n          stroke=\"black\"\r\n          strokeWidth=\"2\"\r\n          fontSize=\"100\"\r\n          x=\"30\"\r\n          y=\"110\"\r\n        >\r\n          ARIEL\r\n        </TT>\r\n      </Svg>\r\n    </Animated.View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  header: {\r\n    fontSize: 90,\r\n    backgroundColor: \"#00000000\",\r\n    marginLeft: 20,\r\n    marginTop: 30,\r\n    marginBottom: 50,\r\n    fontFamily: \"ARI\",\r\n    fontWeight: \"700\",\r\n    letterSpacing: 7\r\n  }\r\n});\r\n\r\nconst mapStateToProps = state => {\r\n  return state;\r\n};\r\n\r\nHeader = connect(mapStateToProps)(Header);\r\nexport default Header;\r\n","import { Dimensions, Platform } from \"react-native\";\r\nexport const webMobile =\r\n  Platform.OS === \"web\" && Dimensions.get(\"window\").width < 768;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Dimensions,\r\n  Image,\r\n  StyleSheet,\r\n  Text,\r\n  TouchableOpacity,\r\n  View,\r\n  Platform\r\n} from \"react-native\";\r\nimport Svg, { Polyline } from \"react-native-svg\";\r\nimport { webMobile } from \"./utils\";\r\nconst lorem =\r\n  \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\";\r\n\r\nfunction getRandomInt(min, max) {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nconst ImageCard = ({ img, i, pvImg }) => {\r\n  const [aspect, setAspect] = useState(0);\r\n  Image.getSize(img.url, (w, h) => setAspect(w / h));\r\n  if (!aspect) return <Text>FREG</Text>;\r\n  const wWidth = Dimensions.get(\"window\").width;\r\n  const width = wWidth > 500 ? 500 : wWidth;\r\n  const height = width / aspect;\r\n\r\n  const points = [];\r\n  const divisor = 25;\r\n  const multiplier = 400;\r\n  const pusher = 15;\r\n  for (let i = 0; i < divisor; i++) {\r\n    const x =\r\n      i === 0\r\n        ? pusher\r\n        : getRandomInt(\r\n            (i * multiplier) / divisor,\r\n            (i * multiplier) / divisor + pusher\r\n          );\r\n    const y = getRandomInt(0, 100);\r\n    points.push(`${x},${y}`);\r\n  }\r\n  const pointString = points.join(\" \");\r\n\r\n  return (\r\n    <View\r\n      style={[\r\n        {\r\n          width: wWidth < 500 ? wWidth : 500,\r\n          marginTop: i && Platform.OS === \"web\" ? 100 : 0\r\n        },\r\n        styles.cardContainer\r\n      ]}\r\n    >\r\n      <View>\r\n        <TouchableOpacity\r\n          onPress={() => {\r\n            if (Platform.OS === \"web\" && Dimensions.get(\"window\").width < 768)\r\n              return;\r\n            pvImg();\r\n          }}\r\n        >\r\n          <Image\r\n            style={[{ width, height }]}\r\n            source={{\r\n              uri: img.url\r\n            }}\r\n          />\r\n        </TouchableOpacity>\r\n        <View style={{ marginTop: 4 }}>\r\n          <View style={styles.bottomWrapper}>\r\n            <Text style={styles.title}>{img.title}</Text>\r\n            <Text style={styles.description}>{lorem}</Text>\r\n          </View>\r\n        </View>\r\n      </View>\r\n      {(Platform.OS !== \"web\" || webMobile) && (\r\n        <Svg width={wWidth} height=\"100px\" style={{ marginVertical: 20 }}>\r\n          <Polyline\r\n            points={pointString}\r\n            fill=\"none\"\r\n            stroke=\"black\"\r\n            strokeWidth=\"3\"\r\n          />\r\n        </Svg>\r\n      )}\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  cardContainer: {\r\n    marginBottom: 20\r\n  },\r\n  cardWrapper: {\r\n    width: 500\r\n  },\r\n  bottomWrapper: {\r\n    width: \"86%\",\r\n    marginLeft: 20\r\n  },\r\n  title: {\r\n    marginTop: 15,\r\n    fontFamily: \"ARI\",\r\n    fontWeight: \"bold\",\r\n    fontSize: 31,\r\n    textTransform: \"capitalize\",\r\n    letterSpacing: 4\r\n  },\r\n  description: {\r\n    marginTop: 10,\r\n    // marginLeft: 20,\r\n    fontSize: 15,\r\n    width: 350,\r\n    fontFamily: \"euclid\"\r\n  }\r\n});\r\n\r\nexport default ImageCard;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  Dimensions,\r\n  Image,\r\n  Text,\r\n  TouchableOpacity,\r\n  View,\r\n  TouchableHighlight,\r\n  Platform,\r\n  ScrollView\r\n} from \"react-native\";\r\nimport { ScreenOrientation } from \"expo\";\r\n\r\nfunction changeScreenOrientation() {\r\n  return async function(dispatch) {\r\n    console.log(dispatch);\r\n    const { orientation } = await ScreenOrientation.getOrientationAsync();\r\n    console.log(dispatch, orientation);\r\n    if (orientation.includes(\"LANDSCAPE\")) {\r\n      await ScreenOrientation.lockAsync(ScreenOrientation.Orientation.PORTRAIT);\r\n      dispatch({ type: \"HIDE_PREVIEW\" });\r\n    } else {\r\n      await ScreenOrientation.lockAsync(\r\n        ScreenOrientation.Orientation.LANDSCAPE\r\n      );\r\n      dispatch({ type: \"SHOW_PREVIEW\" });\r\n    }\r\n  };\r\n}\r\n\r\n// function changeScreenOrientation() {\r\n//   return function(dispatch) {\r\n//     console.log(dispatch);\r\n//   };\r\n// }\r\n\r\nlet ImagePreview = ({ previewUrl, dispatch }) => {\r\n  console.log(\"ghug?\");\r\n  const [aspect, setAspect] = useState(0);\r\n  const [wH, setWh] = useState({ w: 0, h: 0 });\r\n  useEffect(() => {\r\n    Image.getSize(previewUrl, (w, h) => {\r\n      //   setAspect(w / h);\r\n      setWh({ w, h });\r\n    });\r\n  }, []);\r\n\r\n  let height, width;\r\n  //   if (aspect > 1) {\r\n  width = Dimensions.get(\"window\").width;\r\n  height = width / aspect;\r\n  //   } else {\r\n  //     height = Dimensions.get(\"window\").height;\r\n  //     width = height / aspect;\r\n  //   }\r\n\r\n  //   async function changeScreenOrientation() {\r\n  //     await ScreenOrientation.lockAsync(ScreenOrientation.Orientation.LANDSCAPE);\r\n  //   }\r\n  console.log(wH.w);\r\n  if (wH.w === 0) return <Text>loading</Text>;\r\n  console.log(\"rendering\");\r\n  return (\r\n    // <ScrollView\r\n    //   contentContainerStyle={{\r\n    //     position: \"absolute\",\r\n    //     left: 0,\r\n    //     top: 0,\r\n    //     height: \"100%\",\r\n    //     width: \"100%\",\r\n    //     backgroundColor: \"black\",\r\n    //     position: Platform.OS === \"web\" ? \"fixed\" : \"absolute\"\r\n    //   }}\r\n    // >\r\n    <View\r\n      style={{\r\n        position: \"absolute\",\r\n        left: 0,\r\n        top: 0,\r\n        height: \"100%\",\r\n        width: \"100%\",\r\n        backgroundColor: \"black\",\r\n        position: Platform.OS === \"web\" ? \"fixed\" : \"absolute\"\r\n      }}\r\n      //   onPress={() => dispatch({ type: \"HIDE_PREVIEW\" })}\r\n    >\r\n      <ScrollView horizontal={true} stickyHeaderIndices={[0]}>\r\n        <ScrollView stickyHeaderIndices={[0]}>\r\n          <TouchableHighlight\r\n            style={{\r\n              position: \"absolute\",\r\n              left: \"40%\"\r\n            }}\r\n            onPress={() => {\r\n              console.log(\"wart\");\r\n              if (Platform.OS !== \"web\") {\r\n                dispatch(changeScreenOrientation());\r\n              } else {\r\n                dispatch({ type: \"HIDE_PREVIEW\" });\r\n              }\r\n            }}\r\n          >\r\n            <View\r\n              style={{\r\n                opacity: 0.7,\r\n                borderRadius: 100,\r\n                backgroundColor: \"purple\",\r\n                height: 50,\r\n                width: 50,\r\n                top: 20\r\n              }}\r\n            >\r\n              <Text\r\n                style={{\r\n                  fontSize: 50,\r\n                  color: \"white\",\r\n                  textAlign: \"center\",\r\n                  lineHeight: 60\r\n                }}\r\n              >\r\n                X\r\n              </Text>\r\n            </View>\r\n          </TouchableHighlight>\r\n          <Image\r\n            style={{\r\n              height: wH.h,\r\n              width: wH.w\r\n              //   transform: [{ rotate: \"90deg\" }]\r\n            }}\r\n            source={{\r\n              uri: previewUrl\r\n            }}\r\n          />\r\n        </ScrollView>\r\n      </ScrollView>\r\n    </View>\r\n  );\r\n};\r\n\r\nImagePreview = connect(state => state)(ImagePreview);\r\nexport default ImagePreview;\r\n\r\n// MOB\r\n\r\n// let ImagePreview = ({ previewUrl, dispatch }) => {\r\n//   const [aspect, setAspect] = useState(0);\r\n//   Image.getSize(previewUrl, (w, h) => setAspect(w / h));\r\n\r\n//   let height, width;\r\n//   if (aspect === 1) {\r\n//     height = Dimensions.get(\"window\").width;\r\n//     width = height / aspect;\r\n//   } else {\r\n//     width = Dimensions.get(\"window\").height;\r\n//     height = width / aspect;\r\n//   }\r\n\r\n//   console.log(height, width, aspect, \"aspect\");\r\n//   if (!aspect) return <Text>loading</Text>;\r\n//   return (\r\n//     <View\r\n//       style={{\r\n//         position: \"absolute\",\r\n//         left: -114,\r\n//         top: 114,\r\n//         zIndex: 3,\r\n//         width: \"100%\",\r\n//         height: \"100%\"\r\n//       }}\r\n//     >\r\n//       <TouchableHighlight\r\n//         style={{\r\n//           width: \"100%\",\r\n//           height: \"100%\"\r\n//         }}\r\n//         pointerEvents={\"box-only\"}\r\n//         onPress={() => dispatch({ type: \"HIDE_PREVIEW\" })}\r\n//       >\r\n//         <Image\r\n//           style={{\r\n//             height,\r\n//             width,\r\n//             position: \"absolute\",\r\n//             transform: [{ rotate: \"90deg\" }]\r\n//           }}\r\n//           source={{\r\n//             uri: previewUrl\r\n//           }}\r\n//         />\r\n//       </TouchableHighlight>\r\n//     </View>\r\n//   );\r\n// };\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { StyleSheet, ScrollView, View, Text, Platform } from \"react-native\";\r\nimport Header from \"./Header\";\r\nimport ImageCard from \"./ImageCard\";\r\nimport ImagePreview from \"./ImagePreview\";\r\nimport { ScreenOrientation } from \"expo\";\r\n\r\nfunction changeScreenOrientation(url) {\r\n  return async function(dispatch) {\r\n    console.log(dispatch);\r\n    const { orientation } = await ScreenOrientation.getOrientationAsync();\r\n    console.log(dispatch, orientation);\r\n    if (orientation.includes(\"LANDSCAPE\")) {\r\n      await ScreenOrientation.lockAsync(ScreenOrientation.Orientation.PORTRAIT);\r\n      dispatch({ type: \"HIDE_PREVIEW\" });\r\n    } else {\r\n      await ScreenOrientation.lockAsync(\r\n        ScreenOrientation.Orientation.LANDSCAPE\r\n      );\r\n      dispatch({ type: \"SHOW_PREVIEW\", url });\r\n    }\r\n  };\r\n}\r\n\r\nlet ImageViewer = store => {\r\n  if (!store.imgUrls) return <Text>wat</Text>;\r\n  const handleScroll = event => {\r\n    const y = event.nativeEvent.contentOffset.y;\r\n    if (y >= 100) {\r\n      store.dispatch({ type: \"HIDE_HEADER\" });\r\n    } else {\r\n      store.dispatch({ type: \"SHOW_HEADER\" });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <View style={{ alignItems: \"center\" }}>\r\n      <ScrollView\r\n        stickyHeaderIndices={[0]}\r\n        onScroll={handleScroll}\r\n        contentContainerStyle={{\r\n          flexGrow: 1,\r\n          justifyContent: \"space-between\",\r\n          maxWidth: 1200\r\n        }}\r\n      >\r\n        <Header />\r\n        <View style={styles.container}>\r\n          {store.imgUrls.map((img, i) => {\r\n            return (\r\n              <ImageCard\r\n                key={`${img.folder}-${img.title}`}\r\n                img={img}\r\n                i={i}\r\n                pvImg={() => {\r\n                  if (Platform.OS !== \"web\") {\r\n                    store.dispatch(changeScreenOrientation(img.url));\r\n                  } else {\r\n                    store.dispatch({ type: \"SHOW_PREVIEW\", url: img.url });\r\n                  }\r\n                }}\r\n              />\r\n            );\r\n          })}\r\n        </View>\r\n      </ScrollView>\r\n      {store.showPreview && <ImagePreview />}\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: \"#ffff\",\r\n    flexDirection: \"row\",\r\n    flexWrap: \"wrap\",\r\n    width: \"100%\",\r\n    justifyContent: \"space-around\"\r\n  }\r\n});\r\n\r\nconst mapStateToProps = state => {\r\n  return state;\r\n};\r\n\r\nImageViewer = connect(mapStateToProps)(ImageViewer);\r\nexport default ImageViewer;\r\n","import React, { useState } from \"react\";\nimport {\n  Alert,\n  StatusBar,\n  View,\n  Modal,\n  TouchableHighlight,\n  Text,\n  Image\n} from \"react-native\";\nimport { AppLoading } from \"expo\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport ImageViewer from \"./ImageViewer\";\nimport * as Font from \"expo-font\";\nimport { ScreenOrientation } from \"expo\";\n\nfunction reducer(\n  state = {\n    imgUrls: [],\n    ui: { header: 1 },\n    showPreview: false,\n    previewUrl: \"\"\n  },\n  action\n) {\n  switch (action.type) {\n    case \"FETCH\":\n      const images = action.data.map(({ title, description, url }) => {\n        return { title, description, url };\n      });\n\n      const newImageState = {\n        ...state,\n        imgUrls: [...state.imgUrls, ...images]\n      };\n      return newImageState;\n    case \"HIDE_HEADER\":\n      return { ...state, ui: { header: 0 } };\n    case \"SHOW_HEADER\":\n      return { ...state, ui: { header: 1 } };\n    case \"SHOW_PREVIEW\":\n      console.log(\"show p\");\n      changeScreenOrientation();\n\n      return { ...state, showPreview: true, previewUrl: action.url };\n    case \"HIDE_PREVIEW\":\n      console.log(\"hide p\");\n      changeScreenOrientation();\n\n      return { ...state, showPreview: false };\n    default:\n      return state;\n  }\n}\nfunction fetchEntries() {\n  return function(dispatch) {\n    fetch(\"https://chimpstagram-upload.glitch.me/getgrams\")\n      .then(response => response.json())\n      .then(data => dispatch({ type: \"FETCH\", data }));\n  };\n}\nfunction changeScreenOrientation() {\n  return async function(dispatch) {\n    console.log(dispatch);\n    const { orientation } = await ScreenOrientation.getOrientationAsync();\n    if (orientation.includes(\"LANDSCAPE\")) {\n      await ScreenOrientation.lockAsync(ScreenOrientation.Orientation.PORTRAIT);\n    } else {\n      await ScreenOrientation.lockAsync(\n        ScreenOrientation.Orientation.LANDSCAPE\n      );\n    }\n  };\n}\n\nconst store = createStore(reducer, applyMiddleware(thunk));\nstore.dispatch(fetchEntries());\nexport default function App(props) {\n  const [isLoadingComplete, setLoadingComplete] = useState(false);\n  const [modalVisible, setModalVisible] = useState(false);\n\n  if (!isLoadingComplete && !props.skipLoadingScreen) {\n    return (\n      <AppLoading\n        startAsync={loadResourcesAsync}\n        onError={handleLoadingError}\n        onFinish={() => handleFinishLoading(setLoadingComplete)}\n      />\n    );\n  }\n  const imgurl =\n    \"https://storage.googleapis.com/chcken/eat shit and die/eat shit and die\";\n  return (\n    <Provider store={store}>\n      <Modal\n        animationType=\"slide\"\n        transparent={false}\n        visible={modalVisible}\n        onRequestClose={() => {\n          Alert.alert(\"Modal has been closed.\");\n        }}\n        onShow={() => changeScreenOrientation()}\n      >\n        <View>\n          <TouchableHighlight\n            onPress={() => {\n              setModalVisible(!modalVisible);\n            }}\n          >\n            <Image\n              style={{ height: \"100%\", width: \"100%\" }}\n              source={{\n                uri: imgurl\n              }}\n            />\n          </TouchableHighlight>\n        </View>\n      </Modal>\n      <StatusBar hidden={true} />\n      <ImageViewer />\n    </Provider>\n  );\n}\n\nasync function loadResourcesAsync() {\n  await Promise.all([\n    // Asset.loadAsync([\n    //   require('./assets/images/robot-dev.png'),\n    //   require('./assets/images/robot-prod.png'),\n    // ]),\n    Font.loadAsync({\n      // This is the font that we are using for our tab bar\n      // We include SpaceMono because we use it in HomeScreen.js. Feel free to\n      // remove this if you are not using it in your app\n      euclid: require(\"./assets/Euclid.ttf\"),\n      ARI: require(\"./assets/ARI.ttf\")\n    })\n  ]);\n}\n\nfunction handleLoadingError(error) {\n  // In this case, you might want to report the error to your error reporting\n  // service, for example Sentry\n  console.warn(error);\n}\n\nfunction handleFinishLoading(setLoadingComplete) {\n  setLoadingComplete(true);\n}\n","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function() {\n    navigator.serviceWorker\n      .register('/expo-service-worker.js', { scope: '/' })\n      .then(function(info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function(error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n","module.exports = __webpack_public_path__ + \"./fonts/Euclid.ttf\";","module.exports = __webpack_public_path__ + \"./fonts/ARI.ttf\";"],"sourceRoot":""}